/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Login = __webpack_require__(1);

var _Login2 = _interopRequireDefault(_Login);

var _Generator = __webpack_require__(9);

var _Generator2 = _interopRequireDefault(_Generator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Store / Global item
/**
 * Entry point in to the frontend application (run in the website)
 */

window.nowpass = {
    clickedElement: null
};

// Login events
window.nowpass.login = new _Login2.default();
window.nowpass.generator = new _Generator2.default();

// Set the global clicked item (to position popups and insert items)
document.addEventListener('mousedown', function (event) {
    if (event.button === 2 && window.nowpass) {
        window.nowpass.clickedElement = event.target;
    }
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _popup = __webpack_require__(2);

var _popup2 = _interopRequireDefault(_popup);

var _Fill = __webpack_require__(3);

var _Fill2 = _interopRequireDefault(_Fill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Login Main Handler
 *
 * Workflow:
 * - chrome.runtime.onMessage is called with task elements and the url
 * - extension url is set
 * - ifFrame with extension url is shown
 * - user clicks in popup
 * - chrome.runtime.onMessage is called with insert and the login data
 * - popup is closed, login data is deleted
 */
var Login = function () {
    /**
     * Constructor
     */
    function Login() {
        _classCallCheck(this, Login);

        this.popup = _popup2.default;
        this.login = null;
        this.clickedElement = null;

        // Set up event listener
        this.init();
    }

    /**
     * Init the Listeners (called on construct)
     */


    _createClass(Login, [{
        key: 'init',
        value: function init() {
            // Receive message for Login tasks
            chrome.runtime.onMessage.addListener(function (message, _, sendResponse) {
                console.log("Got message from background page: " + JSON.stringify(message));

                var element = window.nowpass.clickedElement || document.activeElement;

                if (message.task === 'elements') {
                    // Get elements iframe
                    _popup2.default.showIframe(element, message.url);
                } else if (message.task === 'insert') {
                    // Insert elements
                    window.nowpass.login.setLogin(message.login);
                    window.nowpass.login.insert();
                } else if (message.task === 'close') {
                    // Close elements
                    _popup2.default.closePopup();
                }
            });
        }

        /**
         * Set the Login
         *
         * @param login {object}
         */

    }, {
        key: 'setLogin',
        value: function setLogin(login) {
            this.login = login;
        }

        /**
         * Insert the Login (can consist of username + password or only password) into the form
         */

    }, {
        key: 'insert',
        value: function insert() {
            (0, _Fill2.default)({
                login: this.login,
                clickedElement: window.nowpass.clickedElement || document.activeElement
            });

            // Delete login
            this.login = null;
            window.nowpass.clickedElement = null;
            _popup2.default.closePopup();
        }
    }]);

    return Login;
}();

exports.default = Login;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Popup helper
 */
exports.default = {
    POPUP_WIDTH: '400px',
    POPUP_HEIGHT: '350px',

    /**
     * Show an Popup containing an iframe and insert it at the end of the body
     *
     * @param element {Node}
     * @param iframeSrc {string} The src to be included
     */
    showIframe: function showIframe(element, iframeSrc) {
        var elementPosition = this.getElementPositions(element);

        // Create a new container
        var div = document.createElement("div");
        div.id = 'nowpass-overlay-' + Math.round(Math.random() * 1000);
        div.style.position = 'absolute';

        // Hardcoded for now
        div.style.top = elementPosition.top + 35 + 'px';
        div.style.left = elementPosition.left + 20 + 'px';

        div.style.width = this.POPUP_WIDTH;
        div.style.height = this.POPUP_HEIGHT;
        div.style.zIndex = '2147483647';
        div.style.overflow = 'hidden';
        div.style.borderRadius = '5px';

        var iframe = document.createElement('iframe');

        iframe.src = iframeSrc;

        // iframe style
        iframe.style.width = this.POPUP_WIDTH;
        iframe.style.height = this.POPUP_HEIGHT;
        iframe.style.border = 'none';

        div.append(iframe);

        // Append to body
        this.popup = document.body.appendChild(div);
    },


    /**
     * Close a popup
     */
    closePopup: function closePopup() {
        if (!this.popup) {
            return;
        }

        try {
            document.body.removeChild(this.popup);
        } catch (err) {
            // Ignore, blur event issue that can happen
        }
    },


    /**
     * Get the positions of the element where we are showing the dialog
     *
     * @param element
     * @returns {{top: number, left: number}}
     */
    getElementPositions: function getElementPositions(element) {
        var box = element.getBoundingClientRect();
        var body = document.body;
        var docEl = document.documentElement;

        var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
        var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;

        var clientTop = docEl.clientTop || body.clientTop || 0;
        var clientLeft = docEl.clientLeft || body.clientLeft || 0;

        var top = box.top + scrollTop - clientTop;
        var left = box.left + scrollLeft - clientLeft;

        return { top: Math.round(top), left: Math.round(left) };
    }
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (params) {
    var login = params.login;

    if (!login) {
        return false;
    }

    // We have a serialized form, that makes things easier
    var result = (0, _FormData2.default)(params);

    if (result) {
        return true;
    }

    // We have a username, so two fields (at least to fill)
    result = (0, _UserData2.default)(params);

    if (result) {
        return true;
    }

    // We just fill the element (Fallback)
    result = (0, _PasswordData2.default)(params);

    return result;
};

var _FormData = __webpack_require__(4);

var _FormData2 = _interopRequireDefault(_FormData);

var _UserData = __webpack_require__(5);

var _UserData2 = _interopRequireDefault(_UserData);

var _PasswordData = __webpack_require__(6);

var _PasswordData2 = _interopRequireDefault(_PasswordData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (params) {
    var login = params.login;

    if (!login.form_data) {
        return false;
    }

    // TODO
    console.log('TODO');

    // Not able to fill the form properly
    return false;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (params) {
    var login = params.login;

    // Presets are predefined templates, so we don't have to parse the page
    var preset = _common2.default[login.host];

    if (preset) {
        var isUserFilled = false;
        var isPasswordFilled = false;

        if (preset.user) {
            isUserFilled = fillPreset(preset.user, login.username);
        }

        if (preset.password) {
            isPasswordFilled = fillPreset(preset.password, login.password);
        }

        // We are happy with that.. we should adjust
        if (isPasswordFilled) {
            return true;
        }
    }

    // Analyze
    var userElement = _DomSearch2.default.searchUser(params);

    if (userElement) {
        userElement.value = login.username;
    }

    var passwordElement = _DomSearch2.default.searchPassword(params);

    if (passwordElement) {
        passwordElement.value = login.password;

        return true;
    }

    // Not able to fill the form properly
    return false;
};

var _common = __webpack_require__(7);

var _common2 = _interopRequireDefault(_common);

var _DomSearch = __webpack_require__(8);

var _DomSearch2 = _interopRequireDefault(_DomSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fill the preset
 *
 * @param elementInfo
 * @param value
 * @returns {boolean}
 */
function fillPreset(elementInfo, value) {
    try {
        if (elementInfo.id) {
            document.getElementById(elementInfo.id).value = value;

            return true;
        }

        if (elementInfo.name) {
            // We fill all fields matching that field
            var elements = document.getElementsByName(elementInfo.name);

            for (var i = 0; i < elements.length; i++) {
                elements[i].value = value;
            }

            return true;
        }
    } catch (exception) {
        // Ignore
        return false;
    }
}

/**
 * Handle user data
 *
 * @param params {object}
 * @returns {boolean}
 */

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (params) {
    var login = params.login;
    var clickedElement = params.clickedElement;

    var tag = clickedElement.tagName;

    if (tag === 'INPUT') {
        clickedElement.value = login.password;
    } else if (tag === 'TEXTAREA') {
        clickedElement.innerHTML = login.password;
    } else {
        console.log('Unknown clickedElement ' + tag);
    }

    // Make sure the input gets updated
    if (window.Event && window.dispatchEvent) {
        clickedElement.dispatchEvent(new Event('input'));
        clickedElement.dispatchEvent(new Event('change'));
        clickedElement.dispatchEvent(new Event('blur'));
    }

    return true;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Preset of common websites (big object)
 */
exports.default = {
    /* Social*/
    'facebook.com': {
        user: {
            id: 'email'
        },
        password: {
            id: 'pass'
        },
        form_id: [
        // Could be multiple
        { id: 'login_form' }]
    },

    'twitter.com': {
        user: {
            id: 'signin-email'
        },
        password: {
            id: 'signin-password'
        }
    },

    'linkedin.com': {
        user: {
            id: 'login-email'
        },
        password: {
            id: 'login-password'
        }
    },

    'xing.com': {
        user: {
            name: 'login_form[username]'
        },
        password: {
            name: 'login_form[password]'
        }
    },

    'instagram.com': {
        user: {
            name: 'username'
        },
        password: {
            name: 'password'
        }
    },

    'reddit.com': {
        user: {
            id: 'user_login'
        },
        password: {
            id: 'passwd_login'
        }
    },

    /* Common Websites */
    'accounts.google.com': {
        style: 'multiple',
        user: {
            id: 'identifierId'
        },
        password: {
            name: 'password'
        }
    }
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Dom search for Elements
 *
 * TODO add autocomplete="current-password" etc.
 */
exports.default = {
    // TODO Move
    USER_REGEX: /user|benutzer|login|email/gi,
    PASSWORD_REGEX: /pass|pw|passwort/gi,

    /**
     * Search for a user input on the page (TODO merge with searchPassword)
     * @param params {object}
     * @returns {*}
     */
    searchUser: function searchUser(params) {
        var clickedElement = params.clickedElement;

        // Let's make a check if the clicked field is a username
        if (clickedElement.tag === 'INPUT' && clickedElement.type !== 'password') {
            // Chance of being the username
            var result = this.checkElement(clickedElement, this.USER_REGEX);

            if (result) {
                return result;
            }
        }

        // Okay it's not

        // Check if element is in a form
        if (clickedElement.tag === 'INPUT' && clickedElement.form) {
            var _elements = document.forms[clickedElement.form].getElementsByTagName("input");

            for (var i = 0; i < _elements.length; i++) {
                var _result = this.checkElement(_elements[i], this.USER_REGEX);

                if (_result) {
                    return _result;
                }
            }
        }

        // We have no form, so we have to get more intrusive
        var elements = document.getElementsByTagName('input');

        for (var _i = 0; _i < elements.length; _i++) {
            var _result2 = this.checkElement(elements[_i], this.USER_REGEX);

            if (_result2) {
                return _result2;
            }
        }

        // Nothing
        return false;
    },

    /**
     * Search for a password field on the page
     * @param params {object}
     * @returns {*}
     */
    searchPassword: function searchPassword(params) {
        var clickedElement = params.clickedElement;

        // Let's make a check if the clicked field is a username
        if (clickedElement.tag === 'INPUT' && clickedElement.type === 'password') {
            // Chance of being the username
            var result = this.checkElement(clickedElement, this.PASSWORD_REGEX);

            if (result) {
                return result;
            }
        }

        // Okay it's not

        // Check if element is in a form
        if (clickedElement.tag === 'INPUT' && clickedElement.form) {
            var _elements2 = document.forms[clickedElement.form].getElementsByTagName("input");

            for (var i = 0; i < _elements2.length; i++) {
                var _result3 = this.checkElement(_elements2[i], this.PASSWORD_REGEX);

                if (_result3) {
                    return _result3;
                }
            }
        }

        // We have no form, so we have to get more intrusive
        var elements = document.getElementsByTagName('input');

        for (var _i2 = 0; _i2 < elements.length; _i2++) {
            var _result4 = this.checkElement(elements[_i2], this.PASSWORD_REGEX);

            if (_result4) {
                return _result4;
            }
        }

        return false;
    },

    /**
     * Check if the element is valid for our regex
     * @param element {object}
     * @param regex {RegExp}
     * @returns {*}
     */
    checkElement: function checkElement(element, regex) {
        // Test (TODO refactor into pattern)
        if (element.id && regex.test(element.id)) {
            return element;
        }

        if (element.name && regex.test(element.name)) {
            return element;
        }

        return false;
    }
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _popup = __webpack_require__(2);

var _popup2 = _interopRequireDefault(_popup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Generator View
 */
var Generator = function () {
    /**
     * Calls init();
     */
    function Generator() {
        _classCallCheck(this, Generator);

        this.popup = _popup2.default;
        this.clickedElement = null;

        // Set up event listener
        this.init();
    }

    /**
     * Sets up the listeners for the Generator
     */


    _createClass(Generator, [{
        key: 'init',
        value: function init() {
            // Receive message for Login tasks
            chrome.runtime.onMessage.addListener(function (message, _, sendResponse) {
                console.log("Requested Generator: " + JSON.stringify(message));

                var element = window.nowpass.clickedElement || document.activeElement;

                if (message.task === 'generate') {
                    // Get generator iframe
                    _popup2.default.showIframe(element, message.url);
                } else if (message.task === 'insert') {
                    window.nowpass.generator.insert(message.generatedPassword);
                } else if (message.task === 'close') {
                    // Close elements
                    _popup2.default.closePopup();
                }
            });
        }

        /**
         * Inserts the generated password into the given field
         */

    }, {
        key: 'insert',
        value: function insert() {}
    }]);

    return Generator;
}();

exports.default = Generator;

/***/ })
/******/ ]);
//# sourceMappingURL=content-script.min.js.map